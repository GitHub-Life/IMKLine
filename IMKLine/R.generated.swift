//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `BOLL介绍.md`.
    static let boll介绍Md = Rswift.FileResource(bundle: R.hostingBundle, name: "BOLL介绍", pathExtension: "md")
    /// Resource file `KDJ介绍.md`.
    static let kdj介绍Md = Rswift.FileResource(bundle: R.hostingBundle, name: "KDJ介绍", pathExtension: "md")
    /// Resource file `MA-EMA-MACD介绍.md`.
    static let maemamacd介绍Md = Rswift.FileResource(bundle: R.hostingBundle, name: "MA-EMA-MACD介绍", pathExtension: "md")
    /// Resource file `RSI介绍.md`.
    static let rsi介绍Md = Rswift.FileResource(bundle: R.hostingBundle, name: "RSI介绍", pathExtension: "md")
    /// Resource file `data.json`.
    static let dataJson = Rswift.FileResource(bundle: R.hostingBundle, name: "data", pathExtension: "json")
    
    /// `bundle.url(forResource: "BOLL介绍", withExtension: "md")`
    static func boll介绍Md(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.boll介绍Md
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "KDJ介绍", withExtension: "md")`
    static func kdj介绍Md(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kdj介绍Md
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MA-EMA-MACD介绍", withExtension: "md")`
    static func maemamacd介绍Md(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.maemamacd介绍Md
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RSI介绍", withExtension: "md")`
    static func rsi介绍Md(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rsi介绍Md
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "data", withExtension: "json")`
    static func dataJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dataJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 4 images.
  struct image {
    /// Image `cancel_full_screen_blue`.
    static let cancel_full_screen_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_full_screen_blue")
    /// Image `cancel_full_screen_white`.
    static let cancel_full_screen_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_full_screen_white")
    /// Image `full_screen_blue`.
    static let full_screen_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_screen_blue")
    /// Image `full_screen_white`.
    static let full_screen_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_screen_white")
    
    /// `UIImage(named: "cancel_full_screen_blue", bundle: ..., traitCollection: ...)`
    static func cancel_full_screen_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_full_screen_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cancel_full_screen_white", bundle: ..., traitCollection: ...)`
    static func cancel_full_screen_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_full_screen_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_screen_blue", bundle: ..., traitCollection: ...)`
    static func full_screen_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_screen_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_screen_white", bundle: ..., traitCollection: ...)`
    static func full_screen_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_screen_white, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 13 localization keys.
    struct localizable {
      /// zh-Hans translation: 低
      /// 
      /// Locales: zh-Hans, en
      static let low = Rswift.StringResource(key: "Low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 分
      /// 
      /// Locales: zh-Hans, en
      static let minute = Rswift.StringResource(key: "minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 分
      /// 
      /// Locales: zh-Hans, en
      static let minutes = Rswift.StringResource(key: "minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 周
      /// 
      /// Locales: zh-Hans, en
      static let week = Rswift.StringResource(key: "week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static let day = Rswift.StringResource(key: "day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static let days = Rswift.StringResource(key: "days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 小时
      /// 
      /// Locales: zh-Hans, en
      static let hour = Rswift.StringResource(key: "hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 小时
      /// 
      /// Locales: zh-Hans, en
      static let hours = Rswift.StringResource(key: "hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 幅
      /// 
      /// Locales: zh-Hans, en
      static let percent = Rswift.StringResource(key: "Percent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 开
      /// 
      /// Locales: zh-Hans, en
      static let opening = Rswift.StringResource(key: "Opening", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 收
      /// 
      /// Locales: zh-Hans, en
      static let closing = Rswift.StringResource(key: "Closing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 量
      /// 
      /// Locales: zh-Hans, en
      static let volume = Rswift.StringResource(key: "Volume", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 高
      /// 
      /// Locales: zh-Hans, en
      static let high = Rswift.StringResource(key: "High", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      
      /// zh-Hans translation: 低
      /// 
      /// Locales: zh-Hans, en
      static func low(_: Void = ()) -> String {
        return NSLocalizedString("Low", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 分
      /// 
      /// Locales: zh-Hans, en
      static func minute(_: Void = ()) -> String {
        return NSLocalizedString("minute", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 分
      /// 
      /// Locales: zh-Hans, en
      static func minutes(_: Void = ()) -> String {
        return NSLocalizedString("minutes", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 周
      /// 
      /// Locales: zh-Hans, en
      static func week(_: Void = ()) -> String {
        return NSLocalizedString("week", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static func day(_: Void = ()) -> String {
        return NSLocalizedString("day", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static func days(_: Void = ()) -> String {
        return NSLocalizedString("days", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 小时
      /// 
      /// Locales: zh-Hans, en
      static func hour(_: Void = ()) -> String {
        return NSLocalizedString("hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 小时
      /// 
      /// Locales: zh-Hans, en
      static func hours(_: Void = ()) -> String {
        return NSLocalizedString("hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 幅
      /// 
      /// Locales: zh-Hans, en
      static func percent(_: Void = ()) -> String {
        return NSLocalizedString("Percent", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开
      /// 
      /// Locales: zh-Hans, en
      static func opening(_: Void = ()) -> String {
        return NSLocalizedString("Opening", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收
      /// 
      /// Locales: zh-Hans, en
      static func closing(_: Void = ()) -> String {
        return NSLocalizedString("Closing", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 量
      /// 
      /// Locales: zh-Hans, en
      static func volume(_: Void = ()) -> String {
        return NSLocalizedString("Volume", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 高
      /// 
      /// Locales: zh-Hans, en
      static func high(_: Void = ()) -> String {
        return NSLocalizedString("High", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 3 localization keys.
    struct main {
      /// zh-Hans translation: 1min
      /// 
      /// Locales: zh-Hans
      static let rrgAiJ5ONormalTitle = Rswift.StringResource(key: "Rrg-ai-j5O.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: KDJ
      /// 
      /// Locales: zh-Hans
      static let gpvyZcNormalTitle = Rswift.StringResource(key: "04G-PV-YZc.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: MA
      /// 
      /// Locales: zh-Hans
      static let uxTLmCENNormalTitle = Rswift.StringResource(key: "UxT-lm-cEN.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      
      /// zh-Hans translation: 1min
      /// 
      /// Locales: zh-Hans
      static func rrgAiJ5ONormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Rrg-ai-j5O.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: KDJ
      /// 
      /// Locales: zh-Hans
      static func gpvyZcNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("04G-PV-YZc.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: MA
      /// 
      /// Locales: zh-Hans
      static func uxTLmCENNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("UxT-lm-cEN.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let imkLineChartViewController = StoryboardViewControllerResource<IMKLineChartViewController>(identifier: "IMKLineChartViewController")
      let name = "Main"
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      
      func imkLineChartViewController(_: Void = ()) -> IMKLineChartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imkLineChartViewController)
      }
      
      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cancel_full_screen_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel_full_screen_blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "full_screen_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'full_screen_blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().imkLineChartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imkLineChartViewController' could not be loaded from storyboard 'Main' as 'IMKLineChartViewController'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
