//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `BOLL介绍.md`.
    static let boll介绍Md = Rswift.FileResource(bundle: R.hostingBundle, name: "BOLL介绍", pathExtension: "md")
    /// Resource file `KDJ介绍.md`.
    static let kdj介绍Md = Rswift.FileResource(bundle: R.hostingBundle, name: "KDJ介绍", pathExtension: "md")
    /// Resource file `MA-EMA-MACD介绍.md`.
    static let maemamacd介绍Md = Rswift.FileResource(bundle: R.hostingBundle, name: "MA-EMA-MACD介绍", pathExtension: "md")
    /// Resource file `RSI介绍.md`.
    static let rsi介绍Md = Rswift.FileResource(bundle: R.hostingBundle, name: "RSI介绍", pathExtension: "md")
    /// Resource file `data.json`.
    static let dataJson = Rswift.FileResource(bundle: R.hostingBundle, name: "data", pathExtension: "json")
    
    /// `bundle.url(forResource: "BOLL介绍", withExtension: "md")`
    static func boll介绍Md(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.boll介绍Md
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "KDJ介绍", withExtension: "md")`
    static func kdj介绍Md(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.kdj介绍Md
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MA-EMA-MACD介绍", withExtension: "md")`
    static func maemamacd介绍Md(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.maemamacd介绍Md
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RSI介绍", withExtension: "md")`
    static func rsi介绍Md(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rsi介绍Md
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "data", withExtension: "json")`
    static func dataJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dataJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `cancel_full_screen_blue`.
    static let cancel_full_screen_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_full_screen_blue")
    /// Image `cancel_full_screen_white`.
    static let cancel_full_screen_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel_full_screen_white")
    /// Image `full_screen_blue`.
    static let full_screen_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_screen_blue")
    /// Image `full_screen_white`.
    static let full_screen_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "full_screen_white")
    /// Image `kline_curve`.
    static let kline_curve = Rswift.ImageResource(bundle: R.hostingBundle, name: "kline_curve")
    /// Image `kline_hollow`.
    static let kline_hollow = Rswift.ImageResource(bundle: R.hostingBundle, name: "kline_hollow")
    /// Image `kline_line`.
    static let kline_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "kline_line")
    /// Image `kline_standard`.
    static let kline_standard = Rswift.ImageResource(bundle: R.hostingBundle, name: "kline_standard")
    
    /// `UIImage(named: "cancel_full_screen_blue", bundle: ..., traitCollection: ...)`
    static func cancel_full_screen_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_full_screen_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cancel_full_screen_white", bundle: ..., traitCollection: ...)`
    static func cancel_full_screen_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel_full_screen_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_screen_blue", bundle: ..., traitCollection: ...)`
    static func full_screen_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_screen_blue, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "full_screen_white", bundle: ..., traitCollection: ...)`
    static func full_screen_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.full_screen_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "kline_curve", bundle: ..., traitCollection: ...)`
    static func kline_curve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kline_curve, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "kline_hollow", bundle: ..., traitCollection: ...)`
    static func kline_hollow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kline_hollow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "kline_line", bundle: ..., traitCollection: ...)`
    static func kline_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kline_line, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "kline_standard", bundle: ..., traitCollection: ...)`
    static func kline_standard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kline_standard, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 13 localization keys.
    struct localizable {
      /// zh-Hans translation: 低
      /// 
      /// Locales: zh-Hans, en
      static let kline_low = Rswift.StringResource(key: "kline_low", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 分
      /// 
      /// Locales: zh-Hans, en
      static let kline_minute = Rswift.StringResource(key: "kline_minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 分
      /// 
      /// Locales: zh-Hans, en
      static let kline_minutes = Rswift.StringResource(key: "kline_minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 周
      /// 
      /// Locales: zh-Hans, en
      static let kline_week = Rswift.StringResource(key: "kline_week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static let kline_day = Rswift.StringResource(key: "kline_day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static let kline_days = Rswift.StringResource(key: "kline_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 小时
      /// 
      /// Locales: zh-Hans, en
      static let kline_hour = Rswift.StringResource(key: "kline_hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 小时
      /// 
      /// Locales: zh-Hans, en
      static let kline_hours = Rswift.StringResource(key: "kline_hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 幅
      /// 
      /// Locales: zh-Hans, en
      static let kline_percent = Rswift.StringResource(key: "kline_percent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 开
      /// 
      /// Locales: zh-Hans, en
      static let kline_opening = Rswift.StringResource(key: "kline_opening", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 收
      /// 
      /// Locales: zh-Hans, en
      static let kline_closing = Rswift.StringResource(key: "kline_closing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 量
      /// 
      /// Locales: zh-Hans, en
      static let kline_volume = Rswift.StringResource(key: "kline_volume", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      /// zh-Hans translation: 高
      /// 
      /// Locales: zh-Hans, en
      static let kline_high = Rswift.StringResource(key: "kline_high", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en"], comment: nil)
      
      /// zh-Hans translation: 低
      /// 
      /// Locales: zh-Hans, en
      static func kline_low(_: Void = ()) -> String {
        return NSLocalizedString("kline_low", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 分
      /// 
      /// Locales: zh-Hans, en
      static func kline_minute(_: Void = ()) -> String {
        return NSLocalizedString("kline_minute", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 分
      /// 
      /// Locales: zh-Hans, en
      static func kline_minutes(_: Void = ()) -> String {
        return NSLocalizedString("kline_minutes", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 周
      /// 
      /// Locales: zh-Hans, en
      static func kline_week(_: Void = ()) -> String {
        return NSLocalizedString("kline_week", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static func kline_day(_: Void = ()) -> String {
        return NSLocalizedString("kline_day", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 天
      /// 
      /// Locales: zh-Hans, en
      static func kline_days(_: Void = ()) -> String {
        return NSLocalizedString("kline_days", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 小时
      /// 
      /// Locales: zh-Hans, en
      static func kline_hour(_: Void = ()) -> String {
        return NSLocalizedString("kline_hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 小时
      /// 
      /// Locales: zh-Hans, en
      static func kline_hours(_: Void = ()) -> String {
        return NSLocalizedString("kline_hours", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 幅
      /// 
      /// Locales: zh-Hans, en
      static func kline_percent(_: Void = ()) -> String {
        return NSLocalizedString("kline_percent", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 开
      /// 
      /// Locales: zh-Hans, en
      static func kline_opening(_: Void = ()) -> String {
        return NSLocalizedString("kline_opening", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 收
      /// 
      /// Locales: zh-Hans, en
      static func kline_closing(_: Void = ()) -> String {
        return NSLocalizedString("kline_closing", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 量
      /// 
      /// Locales: zh-Hans, en
      static func kline_volume(_: Void = ()) -> String {
        return NSLocalizedString("kline_volume", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 高
      /// 
      /// Locales: zh-Hans, en
      static func kline_high(_: Void = ()) -> String {
        return NSLocalizedString("kline_high", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let imkLineChartViewController = StoryboardViewControllerResource<IMKLineChartViewController>(identifier: "IMKLineChartViewController")
      let name = "Main"
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      
      func imkLineChartViewController(_: Void = ()) -> IMKLineChartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imkLineChartViewController)
      }
      
      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "cancel_full_screen_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel_full_screen_blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "full_screen_blue") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'full_screen_blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "kline_standard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kline_standard' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().imkLineChartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imkLineChartViewController' could not be loaded from storyboard 'Main' as 'IMKLineChartViewController'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
